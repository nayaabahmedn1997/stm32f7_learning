
systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a8  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a0  080003a8  000013a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a0  080003a0  000013a8  2**0
                  CONTENTS
  4 .ARM          00000000  080003a0  080003a0  000013a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a0  080003a8  000013a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a0  080003a0  000013a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a4  080003a4  000013a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000013a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003a8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003a8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000045f  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001f8  00000000  00000000  00001835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00001a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000045  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d03b  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ab4  00000000  00000000  0001eb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2c7a  00000000  00000000  0001f5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c224e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b0  00000000  00000000  000c2294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000c2344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000388 	.word	0x08000388

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000388 	.word	0x08000388

08000238 <main>:

#define GPIOBEN  (1U<<1)
#define GPIOB_7  (1U<<7)
#define blue_led  GPIOB_7
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0

	blue_led_setup();
 800023c:	f000 f80e 	bl	800025c <blue_led_setup>
	while(1)
	{
		GPIOB->ODR ^= blue_led;
 8000240:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <main+0x20>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a04      	ldr	r2, [pc, #16]	@ (8000258 <main+0x20>)
 8000246:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 800024a:	6153      	str	r3, [r2, #20]
		systickDelayMs(1000);
 800024c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000250:	f000 f822 	bl	8000298 <systickDelayMs>
		GPIOB->ODR ^= blue_led;
 8000254:	bf00      	nop
 8000256:	e7f3      	b.n	8000240 <main+0x8>
 8000258:	40020400 	.word	0x40020400

0800025c <blue_led_setup>:


}

void blue_led_setup(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0

//	Enable clock ascess to AHb1 inorder to enable GPIOB
	RCC->AHB1ENR |= GPIOBEN;
 8000260:	4b0b      	ldr	r3, [pc, #44]	@ (8000290 <blue_led_setup+0x34>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000264:	4a0a      	ldr	r2, [pc, #40]	@ (8000290 <blue_led_setup+0x34>)
 8000266:	f043 0302 	orr.w	r3, r3, #2
 800026a:	6313      	str	r3, [r2, #48]	@ 0x30
//	Set the pin mode as output pins
	GPIOB->MODER |=(1U<<14);
 800026c:	4b09      	ldr	r3, [pc, #36]	@ (8000294 <blue_led_setup+0x38>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a08      	ldr	r2, [pc, #32]	@ (8000294 <blue_led_setup+0x38>)
 8000272:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000276:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~(1U<<15);
 8000278:	4b06      	ldr	r3, [pc, #24]	@ (8000294 <blue_led_setup+0x38>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a05      	ldr	r2, [pc, #20]	@ (8000294 <blue_led_setup+0x38>)
 800027e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000282:	6013      	str	r3, [r2, #0]

}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40023800 	.word	0x40023800
 8000294:	40020400 	.word	0x40020400

08000298 <systickDelayMs>:
#define CTRL_COUNTFLAG       (1U<<16)



void systickDelayMs(int delay)
{
 8000298:	b480      	push	{r7}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]

//		Configure systick
	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 80002a0:	4b11      	ldr	r3, [pc, #68]	@ (80002e8 <systickDelayMs+0x50>)
 80002a2:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80002a6:	605a      	str	r2, [r3, #4]
 /*    Clear systick current value register    */
	SysTick->VAL = 0;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <systickDelayMs+0x50>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
	/*Enable Systick and select internal clck source*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	@ (80002e8 <systickDelayMs+0x50>)
 80002b0:	2205      	movs	r2, #5
 80002b2:	601a      	str	r2, [r3, #0]

	for(int i=0; i<delay; i++)
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	e009      	b.n	80002ce <systickDelayMs+0x36>
	{
		/*Wait until the COUNTER flag is set*/
		while((SysTick->CTRL & CTRL_COUNTFLAG ) == 0){;}
 80002ba:	bf00      	nop
 80002bc:	4b0a      	ldr	r3, [pc, #40]	@ (80002e8 <systickDelayMs+0x50>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f9      	beq.n	80002bc <systickDelayMs+0x24>
	for(int i=0; i<delay; i++)
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fa      	ldr	r2, [r7, #12]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	dbf1      	blt.n	80002ba <systickDelayMs+0x22>

	}
	SysTick->CTRL = 0;
 80002d6:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <systickDelayMs+0x50>)
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	e000e010 	.word	0xe000e010

080002ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ec:	480d      	ldr	r0, [pc, #52]	@ (8000324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f4:	480c      	ldr	r0, [pc, #48]	@ (8000328 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f6:	490d      	ldr	r1, [pc, #52]	@ (800032c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000330 <LoopForever+0xe>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002fc:	e002      	b.n	8000304 <LoopCopyDataInit>

080002fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000302:	3304      	adds	r3, #4

08000304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000308:	d3f9      	bcc.n	80002fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030a:	4a0a      	ldr	r2, [pc, #40]	@ (8000334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800030c:	4c0a      	ldr	r4, [pc, #40]	@ (8000338 <LoopForever+0x16>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000310:	e001      	b.n	8000316 <LoopFillZerobss>

08000312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000314:	3204      	adds	r2, #4

08000316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000318:	d3fb      	bcc.n	8000312 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031a:	f000 f811 	bl	8000340 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031e:	f7ff ff8b 	bl	8000238 <main>

08000322 <LoopForever>:

LoopForever:
  b LoopForever
 8000322:	e7fe      	b.n	8000322 <LoopForever>
  ldr   r0, =_estack
 8000324:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800032c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000330:	080003a8 	.word	0x080003a8
  ldr r2, =_sbss
 8000334:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000338:	2000001c 	.word	0x2000001c

0800033c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800033c:	e7fe      	b.n	800033c <ADC_IRQHandler>
	...

08000340 <__libc_init_array>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	4d0d      	ldr	r5, [pc, #52]	@ (8000378 <__libc_init_array+0x38>)
 8000344:	4c0d      	ldr	r4, [pc, #52]	@ (800037c <__libc_init_array+0x3c>)
 8000346:	1b64      	subs	r4, r4, r5
 8000348:	10a4      	asrs	r4, r4, #2
 800034a:	2600      	movs	r6, #0
 800034c:	42a6      	cmp	r6, r4
 800034e:	d109      	bne.n	8000364 <__libc_init_array+0x24>
 8000350:	4d0b      	ldr	r5, [pc, #44]	@ (8000380 <__libc_init_array+0x40>)
 8000352:	4c0c      	ldr	r4, [pc, #48]	@ (8000384 <__libc_init_array+0x44>)
 8000354:	f000 f818 	bl	8000388 <_init>
 8000358:	1b64      	subs	r4, r4, r5
 800035a:	10a4      	asrs	r4, r4, #2
 800035c:	2600      	movs	r6, #0
 800035e:	42a6      	cmp	r6, r4
 8000360:	d105      	bne.n	800036e <__libc_init_array+0x2e>
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f855 3b04 	ldr.w	r3, [r5], #4
 8000368:	4798      	blx	r3
 800036a:	3601      	adds	r6, #1
 800036c:	e7ee      	b.n	800034c <__libc_init_array+0xc>
 800036e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000372:	4798      	blx	r3
 8000374:	3601      	adds	r6, #1
 8000376:	e7f2      	b.n	800035e <__libc_init_array+0x1e>
 8000378:	080003a0 	.word	0x080003a0
 800037c:	080003a0 	.word	0x080003a0
 8000380:	080003a0 	.word	0x080003a0
 8000384:	080003a4 	.word	0x080003a4

08000388 <_init>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr

08000394 <_fini>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr
