
UART_Practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000304  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004fc  08000504  00010504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004fc  080004fc  00010504  2**0
                  CONTENTS
  4 .ARM          00000000  080004fc  080004fc  00010504  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004fc  08000504  00010504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004fc  080004fc  000104fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000500  08000500  00010500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000504  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000504  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010504  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010532  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000074a  00000000  00000000  00010575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000257  00000000  00000000  00010cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00010f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005f  00000000  00000000  00010fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dcca  00000000  00000000  00011007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c85  00000000  00000000  0002ecd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a66a5  00000000  00000000  0002f956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000134  00000000  00000000  000d5ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d6130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	080004e4 	.word	0x080004e4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	080004e4 	.word	0x080004e4

08000238 <main>:
char key;



int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	uart3_tx_init();
 800023c:	f000 f88e 	bl	800035c <uart3_tx_init>
	uart3_Rx_init();
 8000240:	f000 f842 	bl	80002c8 <uart3_Rx_init>
	blue_led_setup();
 8000244:	f000 f822 	bl	800028c <blue_led_setup>
	while (1)
	{
		key = usart3_read();
 8000248:	f000 f8d2 	bl	80003f0 <usart3_read>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <main+0x4c>)
 8000252:	701a      	strb	r2, [r3, #0]
		if(key == '1')
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <main+0x4c>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b31      	cmp	r3, #49	; 0x31
 800025a:	d106      	bne.n	800026a <main+0x32>
		{
			GPIOB->ODR |= blue_led;
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <main+0x50>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	4a09      	ldr	r2, [pc, #36]	; (8000288 <main+0x50>)
 8000262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000266:	6153      	str	r3, [r2, #20]
 8000268:	e005      	b.n	8000276 <main+0x3e>
		}
		else
		{
			GPIOB->ODR &=~blue_led;
 800026a:	4b07      	ldr	r3, [pc, #28]	; (8000288 <main+0x50>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	4a06      	ldr	r2, [pc, #24]	; (8000288 <main+0x50>)
 8000270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000274:	6153      	str	r3, [r2, #20]
		}
		uart3_write(key);
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <main+0x4c>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f8cc 	bl	8000418 <uart3_write>
		key = usart3_read();
 8000280:	e7e2      	b.n	8000248 <main+0x10>
 8000282:	bf00      	nop
 8000284:	2000001c 	.word	0x2000001c
 8000288:	40020400 	.word	0x40020400

0800028c <blue_led_setup>:
	}
}

void blue_led_setup(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0

//	Enable clock ascess to AHb1 inorder to enable GPIOB
	RCC->AHB1ENR |= GPIOBEN;
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <blue_led_setup+0x34>)
 8000292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <blue_led_setup+0x34>)
 8000296:	f043 0302 	orr.w	r3, r3, #2
 800029a:	6313      	str	r3, [r2, #48]	; 0x30
//	Set the pin mode as output pins
	GPIOB->MODER |=(1U<<14);
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <blue_led_setup+0x38>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a08      	ldr	r2, [pc, #32]	; (80002c4 <blue_led_setup+0x38>)
 80002a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~(1U<<15);
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <blue_led_setup+0x38>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <blue_led_setup+0x38>)
 80002ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002b2:	6013      	str	r3, [r2, #0]

}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40020400 	.word	0x40020400

080002c8 <uart3_Rx_init>:
	uart3_write(ch);
	return ch;
}

void uart3_Rx_init(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
	/////////////////-------------

	/*	Configure the UART GPIO pins */
	//	1. Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOD_EN;
 80002cc:	4b20      	ldr	r3, [pc, #128]	; (8000350 <uart3_Rx_init+0x88>)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d0:	4a1f      	ldr	r2, [pc, #124]	; (8000350 <uart3_Rx_init+0x88>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6313      	str	r3, [r2, #48]	; 0x30


	//	2. Set PD9 mode as alternate function
	GPIOD->MODER  &=~(1U<<18);
 80002d8:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <uart3_Rx_init+0x8c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a1d      	ldr	r2, [pc, #116]	; (8000354 <uart3_Rx_init+0x8c>)
 80002de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER  |= (1U<<19);
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <uart3_Rx_init+0x8c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a1a      	ldr	r2, [pc, #104]	; (8000354 <uart3_Rx_init+0x8c>)
 80002ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002ee:	6013      	str	r3, [r2, #0]

	//	3. Set PD9 alternate function type to UART_RX(AF7)
	GPIOD->AFR[1] |=(1U<<4);
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <uart3_Rx_init+0x8c>)
 80002f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f4:	4a17      	ldr	r2, [pc, #92]	; (8000354 <uart3_Rx_init+0x8c>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |=(1U<<5);
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <uart3_Rx_init+0x8c>)
 80002fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000300:	4a14      	ldr	r2, [pc, #80]	; (8000354 <uart3_Rx_init+0x8c>)
 8000302:	f043 0320 	orr.w	r3, r3, #32
 8000306:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |=(1U<<6);
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <uart3_Rx_init+0x8c>)
 800030a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800030c:	4a11      	ldr	r2, [pc, #68]	; (8000354 <uart3_Rx_init+0x8c>)
 800030e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000312:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~(1U<<7);
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <uart3_Rx_init+0x8c>)
 8000316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000318:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <uart3_Rx_init+0x8c>)
 800031a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800031e:	6253      	str	r3, [r2, #36]	; 0x24



	/*	Configure the USART module */
	//	1. Enable clock access to UART2
	RCC->APB1ENR |= USART3_EN;
 8000320:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <uart3_Rx_init+0x88>)
 8000322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000324:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <uart3_Rx_init+0x88>)
 8000326:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800032a:	6413      	str	r3, [r2, #64]	; 0x40
	//	2. Configure the buadrate
	USART3->BRR    = 0x008B;
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <uart3_Rx_init+0x90>)
 800032e:	228b      	movs	r2, #139	; 0x8b
 8000330:	60da      	str	r2, [r3, #12]
	//	3. Configure the transfer direction as Rx
	USART3->CR1 = (CR1_TE | CR1_RE);
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <uart3_Rx_init+0x90>)
 8000334:	220c      	movs	r2, #12
 8000336:	601a      	str	r2, [r3, #0]
	//	4. Enable the UART module.
	USART3->CR1 |= USART_UE;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <uart3_Rx_init+0x90>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <uart3_Rx_init+0x90>)
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	6013      	str	r3, [r2, #0]

}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40023800 	.word	0x40023800
 8000354:	40020c00 	.word	0x40020c00
 8000358:	40004800 	.word	0x40004800

0800035c <uart3_tx_init>:


void uart3_tx_init(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	/////////////////-------------

	/*	Configure the UART GPIO pins */
	//	1. Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOD_EN;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <uart3_tx_init+0x88>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a1f      	ldr	r2, [pc, #124]	; (80003e4 <uart3_tx_init+0x88>)
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
	//	2. Set PD8 mode as alternate function
	GPIOD->MODER  &=~(1U<<16);
 800036c:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <uart3_tx_init+0x8c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a1d      	ldr	r2, [pc, #116]	; (80003e8 <uart3_tx_init+0x8c>)
 8000372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000376:	6013      	str	r3, [r2, #0]
	GPIOD->MODER  |= (1U<<17);
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <uart3_tx_init+0x8c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a1a      	ldr	r2, [pc, #104]	; (80003e8 <uart3_tx_init+0x8c>)
 800037e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000382:	6013      	str	r3, [r2, #0]
	//	3. Set PD8 alternate function type to UART_TX(AF7)
	GPIOD->AFR[1] |=(1U<<0);
 8000384:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <uart3_tx_init+0x8c>)
 8000386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000388:	4a17      	ldr	r2, [pc, #92]	; (80003e8 <uart3_tx_init+0x8c>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |=(1U<<1);
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <uart3_tx_init+0x8c>)
 8000392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <uart3_tx_init+0x8c>)
 8000396:	f043 0302 	orr.w	r3, r3, #2
 800039a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |=(1U<<2);
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <uart3_tx_init+0x8c>)
 800039e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a0:	4a11      	ldr	r2, [pc, #68]	; (80003e8 <uart3_tx_init+0x8c>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~(1U<<3);
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <uart3_tx_init+0x8c>)
 80003aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ac:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <uart3_tx_init+0x8c>)
 80003ae:	f023 0308 	bic.w	r3, r3, #8
 80003b2:	6253      	str	r3, [r2, #36]	; 0x24



	/*	Configure the USART module */
	//	1. Enable clock access to UART2
	RCC->APB1ENR |= USART3_EN;
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <uart3_tx_init+0x88>)
 80003b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003b8:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <uart3_tx_init+0x88>)
 80003ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003be:	6413      	str	r3, [r2, #64]	; 0x40
	//	2. Configure the buadrate
	USART3->BRR    = 0x008B;
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <uart3_tx_init+0x90>)
 80003c2:	228b      	movs	r2, #139	; 0x8b
 80003c4:	60da      	str	r2, [r3, #12]
	//	3. Configure the transfer direction as Tx
	USART3->CR1 = (CR1_TE | CR1_RE);
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <uart3_tx_init+0x90>)
 80003c8:	220c      	movs	r2, #12
 80003ca:	601a      	str	r2, [r3, #0]
	//	4. Enable the UART module.
	USART3->CR1 |= USART_UE;
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <uart3_tx_init+0x90>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a06      	ldr	r2, [pc, #24]	; (80003ec <uart3_tx_init+0x90>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40020c00 	.word	0x40020c00
 80003ec:	40004800 	.word	0x40004800

080003f0 <usart3_read>:

unsigned char usart3_read(void){
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
//	Make sure the reeived data resister is not empty
	while(!((USART3->ISR)&USART_ISR_RXNE)){;};
 80003f4:	bf00      	nop
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <usart3_read+0x24>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 0320 	and.w	r3, r3, #32
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0f9      	beq.n	80003f6 <usart3_read+0x6>
//	Return the data
	return USART3->RDR;
 8000402:	4b04      	ldr	r3, [pc, #16]	; (8000414 <usart3_read+0x24>)
 8000404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000406:	b2db      	uxtb	r3, r3

}
 8000408:	4618      	mov	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40004800 	.word	0x40004800

08000418 <uart3_write>:

void uart3_write(unsigned char x)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]

	USART3->TDR =(x);
 8000422:	4a08      	ldr	r2, [pc, #32]	; (8000444 <uart3_write+0x2c>)
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;};
 8000428:	bf00      	nop
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <uart3_write+0x2c>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f9      	beq.n	800042a <uart3_write+0x12>

}
 8000436:	bf00      	nop
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40004800 	.word	0x40004800

08000448 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000448:	480d      	ldr	r0, [pc, #52]	; (8000480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800044c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000450:	480c      	ldr	r0, [pc, #48]	; (8000484 <LoopForever+0x6>)
  ldr r1, =_edata
 8000452:	490d      	ldr	r1, [pc, #52]	; (8000488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000454:	4a0d      	ldr	r2, [pc, #52]	; (800048c <LoopForever+0xe>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000468:	4c0a      	ldr	r4, [pc, #40]	; (8000494 <LoopForever+0x16>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000476:	f000 f811 	bl	800049c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047a:	f7ff fedd 	bl	8000238 <main>

0800047e <LoopForever>:

LoopForever:
  b LoopForever
 800047e:	e7fe      	b.n	800047e <LoopForever>
  ldr   r0, =_estack
 8000480:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800048c:	08000504 	.word	0x08000504
  ldr r2, =_sbss
 8000490:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000494:	20000020 	.word	0x20000020

08000498 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC_IRQHandler>
	...

0800049c <__libc_init_array>:
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	4d0d      	ldr	r5, [pc, #52]	; (80004d4 <__libc_init_array+0x38>)
 80004a0:	4c0d      	ldr	r4, [pc, #52]	; (80004d8 <__libc_init_array+0x3c>)
 80004a2:	1b64      	subs	r4, r4, r5
 80004a4:	10a4      	asrs	r4, r4, #2
 80004a6:	2600      	movs	r6, #0
 80004a8:	42a6      	cmp	r6, r4
 80004aa:	d109      	bne.n	80004c0 <__libc_init_array+0x24>
 80004ac:	4d0b      	ldr	r5, [pc, #44]	; (80004dc <__libc_init_array+0x40>)
 80004ae:	4c0c      	ldr	r4, [pc, #48]	; (80004e0 <__libc_init_array+0x44>)
 80004b0:	f000 f818 	bl	80004e4 <_init>
 80004b4:	1b64      	subs	r4, r4, r5
 80004b6:	10a4      	asrs	r4, r4, #2
 80004b8:	2600      	movs	r6, #0
 80004ba:	42a6      	cmp	r6, r4
 80004bc:	d105      	bne.n	80004ca <__libc_init_array+0x2e>
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c4:	4798      	blx	r3
 80004c6:	3601      	adds	r6, #1
 80004c8:	e7ee      	b.n	80004a8 <__libc_init_array+0xc>
 80004ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ce:	4798      	blx	r3
 80004d0:	3601      	adds	r6, #1
 80004d2:	e7f2      	b.n	80004ba <__libc_init_array+0x1e>
 80004d4:	080004fc 	.word	0x080004fc
 80004d8:	080004fc 	.word	0x080004fc
 80004dc:	080004fc 	.word	0x080004fc
 80004e0:	08000500 	.word	0x08000500

080004e4 <_init>:
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e6:	bf00      	nop
 80004e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ea:	bc08      	pop	{r3}
 80004ec:	469e      	mov	lr, r3
 80004ee:	4770      	bx	lr

080004f0 <_fini>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr
